{"ast":null,"code":"import firestore from '../config/fbconfig';\nimport * as firebase from 'firebase';\n\nasync function get() {\n  var rows = [];\n  await firestore.collection('question').get().then(snapshot => {\n    // var rows= [];\n    snapshot.forEach(doc => {\n      const question = doc.data();\n      const id = doc.id;\n      rows.push({\n        id: id,\n        ...question\n      });\n    });\n  });\n  return rows;\n}\n\nexport const actionName = actionParameter => ({\n  type: 'ACTION_TYPE',\n  actionParameter\n});\nexport const getQuestionList = questionList => {\n  questionList = questionList || 0;\n  return (dispatch, getState) => {\n    firestore.collection('question').get().then(snapshot => {\n      var rows = []; // console.log(\"snapshot \", snapshot );\n\n      snapshot.forEach(doc => {\n        const question = doc.data();\n        const id = doc.id; // question.id = id;\n\n        console.log({\n          id: id,\n          ...question\n        });\n        question[\"createdAt\"] = question[\"createdAt\"].toDate();\n\n        if (question[\"comments\"]) {\n          question[\"comments\"].forEach(comment => {\n            comment[\"metadata\"] = comment[\"metadata\"].toDate();\n          });\n        }\n\n        rows.push({\n          id: id,\n          ...question\n        });\n      });\n      console.log(rows);\n      questionList = rows;\n      dispatch({\n        type: 'GET_QUESTION_LIST',\n        questionList\n      });\n    });\n  };\n};\nexport const filterQuestionList = (questionList, key) => ({\n  type: 'FILTER_QUESTION_LIST',\n  questionList,\n  key\n}); // export const getQuestionList2 = () = ({\n//   type: 'GET_QUESTION_LIST2',\n// })\n\nexport const updateQuestionList = (questionList, newQuestion) => ({\n  type: 'UPDATE_QUESTION_LIST',\n  questionList,\n  newQuestion\n});\nexport const setQuestion = question => ({\n  type: 'SET_QUESTION',\n  question\n});\nexport const addQuestion = question => {\n  return (dispatch, getState) => {\n    //  { getFirebase, getFirestore } 제거\n    // async call to database\n    firestore // 수정된 부분\n    .collection('question').add({ ...question,\n      // authorFirstName: 'Dan',\n      // authorLastName: 'Jooo',\n      // authorId: 12345,\n      createdAt: new Date(),\n      comments: new Array()\n    }).then(() => {\n      // callback 위 작업이 실행되면 어떤 작업을 할 것인지\n      dispatch({\n        type: 'ADD_QUESTION',\n        question\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'ADD_QUESTION',\n        err\n      });\n    });\n  };\n};\nexport const filterQuestion = (questionList, id) => ({\n  type: 'FILTER_QUESTION',\n  questionList,\n  id\n});\nexport const addComment = (question, author, comment) => {\n  const metadata = firebase.firestore.Timestamp.fromDate(new Date());\n  return (dispatch, getState) => {\n    firestore.collection('question').doc(question[\"id\"]).update({\n      comments: firebase.firestore.FieldValue.arrayUnion({\n        author: author,\n        metadata: metadata,\n        comment: comment\n      })\n    }).then(() => {\n      console.log(\"figuring out metada is \", metadata);\n      dispatch({\n        type: 'ADD_COMMENT',\n        question,\n        author,\n        metadata,\n        comment\n      });\n    });\n  };\n};\nexport const getComments = question => {\n  return (dispatch, getState) => {\n    firestore.collection('question').doc(question[\"id\"]).get().then(doc => {\n      // console.log(\"getComments \", doc.data());\n      const comments = doc.data()[\"comments\"];\n      dispatch({\n        type: 'GET_COMMENTS',\n        comments\n      });\n    });\n  };\n};\nexport const login = loginForm => {\n  return (dispatch, getState) => {\n    firebase.auth().signInWithEmailAndPassword(loginForm.id, loginForm.pw).then(() => {\n      var user = firebase.auth().currentUser; // console.log(user);\n\n      dispatch({\n        type: 'LOGIN_SUCCESS',\n        user\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'LOGIN_ERROR',\n        err\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/na/Documents/react-redux-boilerplate/src/actions/index.js"],"names":["firestore","firebase","get","rows","collection","then","snapshot","forEach","doc","question","data","id","push","actionName","actionParameter","type","getQuestionList","questionList","dispatch","getState","console","log","toDate","comment","filterQuestionList","key","updateQuestionList","newQuestion","setQuestion","addQuestion","add","createdAt","Date","comments","Array","catch","err","filterQuestion","addComment","author","metadata","Timestamp","fromDate","update","FieldValue","arrayUnion","getComments","login","loginForm","auth","signInWithEmailAndPassword","pw","user","currentUser"],"mappings":"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","sourcesContent":["import firestore from '../config/fbconfig';\nimport * as firebase from 'firebase';\n\nasync function get() {\n  var rows= [];\n  await firestore.collection('question').get()\n    .then((snapshot)=>{\n      // var rows= [];\n      snapshot.forEach((doc) => {\n        const question = doc.data();\n        \n        const id = doc.id;\n        rows.push({id : id, ...question});\n      })\n    });\n\n  return rows;\n  }\n\n\nexport const actionName = actionParameter => ({\n    type: 'ACTION_TYPE',\n    actionParameter\n})\n\n\nexport const getQuestionList = questionList => {\n  questionList = questionList || 0;\n  return (dispatch, getState) => {\n    firestore.collection('question').get()\n    .then((snapshot)=>{\n      var rows= [];\n      // console.log(\"snapshot \", snapshot );\n      snapshot.forEach((doc) => {\n        const question = doc.data();\n        \n        const id = doc.id;\n        // question.id = id;\n        console.log({id : id, ...question});\n        question[\"createdAt\"] = question[\"createdAt\"].toDate();\n        if (question[\"comments\"]){\n          question[\"comments\"].forEach(comment => {\n            comment[\"metadata\"] = comment[\"metadata\"].toDate();\n          })\n        }\n\n        rows.push({id : id, ...question});\n      })\n      console.log(rows);\n      questionList = rows;\n      dispatch({type: 'GET_QUESTION_LIST', questionList})\n    });\n  }\n}\n\nexport const filterQuestionList = (questionList, key) => ({\n  type: 'FILTER_QUESTION_LIST',\n  questionList,\n  key\n})\n\n// export const getQuestionList2 = () = ({\n//   type: 'GET_QUESTION_LIST2',\n// })\n\nexport const updateQuestionList = (questionList, newQuestion) => ({\n    type: 'UPDATE_QUESTION_LIST',\n    questionList,\n    newQuestion,\n})\n\nexport const setQuestion = question => ({\n    type: 'SET_QUESTION',\n    question\n})\n\nexport const addQuestion = question => {\n  return (dispatch, getState) => {\t//  { getFirebase, getFirestore } 제거\n    // async call to database\n    firestore\t// 수정된 부분\n      .collection('question')\n      .add({\n        ...question,\n        // authorFirstName: 'Dan',\n        // authorLastName: 'Jooo',\n        // authorId: 12345,\n        createdAt: new Date(),\n        comments: new Array(),\n      })\n      .then(() => {\n        // callback 위 작업이 실행되면 어떤 작업을 할 것인지\n        dispatch({ type: 'ADD_QUESTION', question });\n      })\n      .catch(err => {\n        dispatch({ type: 'ADD_QUESTION', err });\n      });\n  };\n}\n\nexport const filterQuestion = (questionList, id) => ({\n  type: 'FILTER_QUESTION',\n  questionList,\n  id\n})\n\nexport const addComment = (question, author, comment) => {\n  const metadata = firebase.firestore.Timestamp.fromDate(new Date());\n  return (dispatch, getState) => {\n    firestore\n      .collection('question')\n      .doc(question[\"id\"])\n      .update({\n        comments: firebase.firestore.FieldValue.arrayUnion({\n            author: author,\n            metadata: metadata,\n            comment: comment,\n          })\n\n      })\n    .then(() => {\n      console.log (\"figuring out metada is \", metadata);\n      dispatch({\n        type: 'ADD_COMMENT',\n        question,\n        author,\n        metadata,\n        comment\n      })\n    })\n  }\n}\n\nexport const getComments = (question) => {\n  return (dispatch, getState) => {\n    firestore\n      .collection('question')\n      .doc(question[\"id\"])\n      .get()\n      .then((doc) => {\n        // console.log(\"getComments \", doc.data());\n        const comments = doc.data()[\"comments\"]\n        dispatch({\n          type: 'GET_COMMENTS',\n          comments,\n      })\n    })\n  }\n}\n\nexport const login = loginForm => {\n  return (dispatch, getState) => {\n    firebase.auth().signInWithEmailAndPassword(loginForm.id, loginForm.pw)\n      .then(() => {\n        var user = firebase.auth().currentUser;\n        // console.log(user);\n        dispatch( {type: 'LOGIN_SUCCESS',  user })\n      })\n      .catch(err => {\n        dispatch ({ type: 'LOGIN_ERROR', err});\n      });\n  }\n}"]},"metadata":{},"sourceType":"module"}