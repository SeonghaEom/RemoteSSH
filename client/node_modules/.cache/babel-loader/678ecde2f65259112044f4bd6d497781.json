{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { callAll } from '../utils';\n\nvar Tracks = function (_Component) {\n  _inherits(Tracks, _Component);\n\n  function Tracks() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Tracks);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.getTrackProps = function () {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _this$props = _this.props,\n          emitMouse = _this$props.emitMouse,\n          emitTouch = _this$props.emitTouch;\n      return _extends({}, props, {\n        onMouseDown: callAll(props.onMouseDown, emitMouse),\n        onTouchStart: callAll(props.onTouchStart, emitTouch)\n      });\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  Tracks.prototype.render = function render() {\n    var getTrackProps = this.getTrackProps,\n        _props = this.props,\n        children = _props.children,\n        left = _props.left,\n        right = _props.right,\n        scale = _props.scale,\n        handles = _props.handles;\n    var domain = scale.getDomain();\n    var tracks = [];\n\n    for (var i = 0; i < handles.length + 1; i++) {\n      var source = handles[i - 1];\n      var target = handles[i];\n\n      if (i === 0 && left === true) {\n        source = {\n          id: '$',\n          value: domain[0],\n          percent: 0\n        };\n      } else if (i === handles.length && right === true) {\n        target = {\n          id: '$',\n          value: domain[1],\n          percent: 100\n        };\n      }\n\n      if (source && target) {\n        tracks.push({\n          id: source.id + '-' + target.id,\n          source: source,\n          target: target\n        });\n      }\n    }\n\n    var renderedChildren = children({\n      tracks: tracks,\n      getTrackProps: getTrackProps\n    });\n    return renderedChildren && React.Children.only(renderedChildren);\n  };\n\n  return Tracks;\n}(Component);\n\nTracks.propTypes = {\n  /**\n   * Boolean value to control whether the left most track is included in the tracks array.\n   */\n  left: PropTypes.bool,\n\n  /**\n   * Boolean value to control whether the right most track is included in the tracks array.\n   */\n  right: PropTypes.bool,\n\n  /** @ignore */\n  scale: PropTypes.object,\n\n  /** @ignore */\n  handles: PropTypes.array,\n\n  /** @ignore */\n  emitMouse: PropTypes.func,\n\n  /** @ignore */\n  emitTouch: PropTypes.func,\n\n  /**\n   * A function to render the tracks. The function receives an object with an array of tracks and a function to get track props. `({ tracks, getTrackProps }): element`\n   */\n  children: PropTypes.func.isRequired\n};\nTracks.defaultProps = {\n  left: true,\n  right: true\n};\nexport default Tracks;","map":null,"metadata":{},"sourceType":"module"}