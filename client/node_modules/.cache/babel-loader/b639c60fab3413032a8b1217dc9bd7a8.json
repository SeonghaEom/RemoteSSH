{"ast":null,"code":"var _jsxFileName = \"/Users/na/Documents/react-redux-boilerplate/src/containers/Comment.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { addComment, getQuestionList, filterQuestion } from '../actions';\nimport { Button, Comment, Form, Header } from 'semantic-ui-react';\n\nconst mapStateToProps = state => ({\n  question: state.question,\n  user: state.loginResult.value,\n  comments: state.comments,\n  questionList: state.questionList\n}); //redux's dispatch to this.props\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    _addComment: (question, author, comment) => dispatch(addComment(question, author, comment)),\n    _getQuestionList: QL => dispatch(getQuestionList(QL)),\n    _filterQuestion: (QL, id) => dispatch(filterQuestion(QL, id)) // _updateQuestionList: (newQuestion) => dispatch(updateQuestionList(newQuestion)),\n\n  };\n};\n\nclass CommentSystem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleOnChange = this.handleOnChange.bind(this);\n    this.state = {\n      text: '',\n      commentList: this.props.question[\"comments\"]\n    };\n  }\n\n  handleSubmit() {\n    console.log(\"submit \", this.props.question[\"comments\"], this.state.commentList);\n\n    this.props._addComment(this.props.question, this.props.user, this.state.text);\n\n    this.props._getQuestionList();\n\n    this.props._filterQuestion(this.props.questionList, this.props.question[\"id\"]);\n\n    this.setState({\n      text: ''\n    });\n    this.setState({\n      commentList: this.props.question[\"comments\"]\n    });\n  }\n\n  handleOnChange(event) {\n    event.persist();\n    console.log(event);\n    this.setState({\n      text: event.target.value\n    });\n  } // static getDerivedStateFromProps(props, state) {\n  //   if (props.question[\"comments\"] != state.commentList) {\n  //     return {\n  //       text: '',\n  //       commentList: props.question[\"comments\"],\n  //     };\n  //   }\n  //   else {\n  //     console.log(\"hello \", props.question[\"comments\"], state.commentList);\n  //   }\n  // }\n\n\n  render() {\n    console.log(\"Comments \", this.props.question);\n    console.log(\"Comments \", this.state.commentList); // console.log(\"commentList \", commentList[\"metadata\"].toDate());\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Comment.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      as: \"h3\",\n      dividing: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }\n    }, \"Comments\"), this.state.commentList.length, this.state.commentList.map((item, i) => {\n      return /*#__PURE__*/React.createElement(Comment, {\n        key: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Comment.Avatar, {\n        src: \"https://react.semantic-ui.com/images/avatar/small/matt.jpg\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(Comment.Content, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Comment.Author, {\n        className: \"comment-author\",\n        as: \"a\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }\n      }, item[\"author\"][\"email\"]), /*#__PURE__*/React.createElement(Comment.Metadata, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 19\n        }\n      }, \"Written at \", item[\"metadata\"])), /*#__PURE__*/React.createElement(Comment.Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 17\n        }\n      }, item[\"comment\"]), /*#__PURE__*/React.createElement(Comment.Actions, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Comment.Action, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 19\n        }\n      }, \"Reply\"))));\n    }), /*#__PURE__*/React.createElement(Form, {\n      reply: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Form.TextArea, {\n      onChange: event => this.handleOnChange(event),\n      value: this.state.text,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      content: \"Add Reply\",\n      labelPosition: \"left\",\n      icon: \"edit\",\n      primary: true,\n      onClick: () => this.handleSubmit(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentSystem);","map":{"version":3,"sources":["/Users/na/Documents/react-redux-boilerplate/src/containers/Comment.jsx"],"names":["React","connect","addComment","getQuestionList","filterQuestion","Button","Comment","Form","Header","mapStateToProps","state","question","user","loginResult","value","comments","questionList","mapDispatchToProps","dispatch","_addComment","author","comment","_getQuestionList","QL","_filterQuestion","id","CommentSystem","Component","constructor","props","handleSubmit","bind","handleOnChange","text","commentList","console","log","setState","event","persist","target","render","length","map","item","i"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAASC,UAAT,EAAqBC,eAArB,EAAsCC,cAAtC,QAA4D,YAA5D;AACA,SAASC,MAAT,EAAiBC,OAAjB,EAA0BC,IAA1B,EAAgCC,MAAhC,QAA8C,mBAA9C;;AAEA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AAChCC,EAAAA,QAAQ,EAAED,KAAK,CAACC,QADgB;AAEhCC,EAAAA,IAAI,EAAEF,KAAK,CAACG,WAAN,CAAkBC,KAFQ;AAGhCC,EAAAA,QAAQ,EAAEL,KAAK,CAACK,QAHgB;AAIhCC,EAAAA,YAAY,EAAEN,KAAK,CAACM;AAJY,CAAL,CAA7B,C,CAOA;;;AACA,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACLC,IAAAA,WAAW,EAAE,CAACR,QAAD,EAAWS,MAAX,EAAmBC,OAAnB,KAA+BH,QAAQ,CAAChB,UAAU,CAACS,QAAD,EAAWS,MAAX,EAAmBC,OAAnB,CAAX,CAD/C;AAELC,IAAAA,gBAAgB,EAAGC,EAAD,IAAQL,QAAQ,CAACf,eAAe,CAACoB,EAAD,CAAhB,CAF7B;AAGLC,IAAAA,eAAe,EAAE,CAACD,EAAD,EAAKE,EAAL,KAAYP,QAAQ,CAACd,cAAc,CAACmB,EAAD,EAAKE,EAAL,CAAf,CAHhC,CAIL;;AAJK,GAAP;AAMH,CAPD;;AAYA,MAAMC,aAAN,SAA4B1B,KAAK,CAAC2B,SAAlC,CAA4C;AAC1CC,EAAAA,WAAW,CAAEC,KAAF,EAAS;AAClB,UAAMA,KAAN;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBD,IAApB,CAAyB,IAAzB,CAAtB;AACA,SAAKrB,KAAL,GAAa;AACXuB,MAAAA,IAAI,EAAE,EADK;AAEXC,MAAAA,WAAW,EAAE,KAAKL,KAAL,CAAWlB,QAAX,CAAoB,UAApB;AAFF,KAAb;AAID;;AAEDmB,EAAAA,YAAY,GAAE;AACZK,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuB,KAAKP,KAAL,CAAWlB,QAAX,CAAoB,UAApB,CAAvB,EAAwD,KAAKD,KAAL,CAAWwB,WAAnE;;AACF,SAAKL,KAAL,CAAWV,WAAX,CAAuB,KAAKU,KAAL,CAAWlB,QAAlC,EAA4C,KAAKkB,KAAL,CAAWjB,IAAvD,EAA6D,KAAKF,KAAL,CAAWuB,IAAxE;;AACA,SAAKJ,KAAL,CAAWP,gBAAX;;AACA,SAAKO,KAAL,CAAWL,eAAX,CAA2B,KAAKK,KAAL,CAAWb,YAAtC,EAAoD,KAAKa,KAAL,CAAWlB,QAAX,CAAoB,IAApB,CAApD;;AACA,SAAK0B,QAAL,CAAc;AAACJ,MAAAA,IAAI,EAAE;AAAP,KAAd;AACA,SAAKI,QAAL,CAAc;AAACH,MAAAA,WAAW,EAAE,KAAKL,KAAL,CAAWlB,QAAX,CAAoB,UAApB;AAAd,KAAd;AACC;;AAEDqB,EAAAA,cAAc,CAACM,KAAD,EAAQ;AACtBA,IAAAA,KAAK,CAACC,OAAN;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACA,SAAKD,QAAL,CAAc;AACZJ,MAAAA,IAAI,EAAEK,KAAK,CAACE,MAAN,CAAa1B;AADP,KAAd;AAGD,GA1B2C,CA4B1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA2B,EAAAA,MAAM,GAAG;AACPN,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyB,KAAKP,KAAL,CAAWlB,QAApC;AACAwB,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyB,KAAK1B,KAAL,CAAWwB,WAApC,EAFO,CAGP;;AACA,wBAEE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,OAAD,CAAS,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AAAQ,MAAA,EAAE,EAAC,IAAX;AAAgB,MAAA,QAAQ,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAIG,KAAKxB,KAAL,CAAWwB,WAAX,CAAuBQ,MAJ1B,EAKG,KAAKhC,KAAL,CAAWwB,WAAX,CAAuBS,GAAvB,CAA2B,CAACC,IAAD,EAAMC,CAAN,KAAY;AACtC,0BACA,oBAAC,OAAD;AAAS,QAAA,GAAG,EAAEA,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,OAAD,CAAS,MAAT;AAAgB,QAAA,GAAG,EAAC,4DAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAEE,oBAAC,OAAD,CAAS,OAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,OAAD,CAAS,MAAT;AAAgB,QAAA,SAAS,EAAG,gBAA5B;AAA6C,QAAA,EAAE,EAAC,GAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAqDD,IAAI,CAAC,QAAD,CAAJ,CAAe,OAAf,CAArD,CADF,eAEE,oBAAC,OAAD,CAAS,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAiBA,IAAI,CAAC,UAAD,CAArB,CADF,CAFF,eAKE,oBAAC,OAAD,CAAS,IAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAeA,IAAI,CAAC,SAAD,CAAnB,CALF,eAME,oBAAC,OAAD,CAAS,OAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,OAAD,CAAS,MAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,CANF,CAFF,CADA;AAcA,KAfD,CALH,eAqBE,oBAAC,IAAD;AAAM,MAAA,KAAK,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD,CAAM,QAAN;AACE,MAAA,QAAQ,EAAGN,KAAD,IAAW,KAAKN,cAAL,CAAoBM,KAApB,CADvB;AACmD,MAAA,KAAK,EAAE,KAAK5B,KAAL,CAAWuB,IADrE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAIE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,WAAhB;AAA4B,MAAA,aAAa,EAAC,MAA1C;AAAiD,MAAA,IAAI,EAAC,MAAtD;AAA6D,MAAA,OAAO,MAApE;AACE,MAAA,OAAO,EAAE,MAAM,KAAKH,YAAL,EADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CArBF,CADF,CAFF;AAoCD;;AAhFyC;;AAoF5C,eAAe7B,OAAO,CAACQ,eAAD,EAAkBQ,kBAAlB,CAAP,CAA6CS,aAA7C,CAAf","sourcesContent":["import React from 'react';\nimport {connect} from 'react-redux';\nimport { addComment, getQuestionList, filterQuestion } from '../actions';\nimport { Button, Comment, Form, Header } from 'semantic-ui-react';\n\nconst mapStateToProps = state => ({\n  question: state.question,\n  user: state.loginResult.value,\n  comments: state.comments,\n  questionList: state.questionList,\n})\n\n//redux's dispatch to this.props\nconst mapDispatchToProps = dispatch => {\n    return {\n      _addComment: (question, author, comment) => dispatch(addComment(question, author, comment)),\n      _getQuestionList: (QL) => dispatch(getQuestionList(QL)),\n      _filterQuestion: (QL, id) => dispatch(filterQuestion(QL, id)),\n      // _updateQuestionList: (newQuestion) => dispatch(updateQuestionList(newQuestion)),\n    }\n}\n\n\n\n\nclass CommentSystem extends React.Component {\n  constructor (props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleOnChange = this.handleOnChange.bind(this);\n    this.state = {\n      text: '',\n      commentList: this.props.question[\"comments\"],\n    }\n  }\n\n  handleSubmit(){\n    console.log(\"submit \", this.props.question[\"comments\"], this.state.commentList);\n  this.props._addComment(this.props.question, this.props.user, this.state.text);\n  this.props._getQuestionList();\n  this.props._filterQuestion(this.props.questionList, this.props.question[\"id\"]);\n  this.setState({text: ''});\n  this.setState({commentList: this.props.question[\"comments\"]});\n  }\n\n  handleOnChange(event) {\n  event.persist();\n  console.log(event);\n  this.setState({\n    text: event.target.value\n  })\n}\n\n  // static getDerivedStateFromProps(props, state) {\n  //   if (props.question[\"comments\"] != state.commentList) {\n  //     return {\n  //       text: '',\n  //       commentList: props.question[\"comments\"],\n  //     };\n  //   }\n  //   else {\n  //     console.log(\"hello \", props.question[\"comments\"], state.commentList);\n  //   }\n  // }\n\n  render() {\n    console.log(\"Comments \", this.props.question);\n    console.log(\"Comments \", this.state.commentList);\n    // console.log(\"commentList \", commentList[\"metadata\"].toDate());\n    return (\n\n      <div className=\"container-comment\">\n        <Comment.Group>\n          <Header as='h3' dividing>\n            Comments\n          </Header>\n          {this.state.commentList.length}\n          {this.state.commentList.map((item,i) => {\n            return (\n            <Comment key={i}>\n              <Comment.Avatar src='https://react.semantic-ui.com/images/avatar/small/matt.jpg' />\n              <Comment.Content>\n                <Comment.Author className = \"comment-author\" as='a'>{item[\"author\"][\"email\"]}</Comment.Author>\n                <Comment.Metadata>\n                  <div>Written at {item[\"metadata\"]}</div>\n                </Comment.Metadata>\n                <Comment.Text>{item[\"comment\"]}</Comment.Text>\n                <Comment.Actions>\n                  <Comment.Action>Reply</Comment.Action>\n                </Comment.Actions>\n              </Comment.Content>\n            </Comment>\n          )})}\n          <Form reply>\n            <Form.TextArea \n              onChange={(event) => this.handleOnChange(event)} value={this.state.text}\n            />\n            <Button content='Add Reply' labelPosition='left' icon='edit' primary\n              onClick={() => this.handleSubmit()}\n            />\n          </Form>\n        </Comment.Group>\n      </div>\n\n    )\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentSystem);\n"]},"metadata":{},"sourceType":"module"}