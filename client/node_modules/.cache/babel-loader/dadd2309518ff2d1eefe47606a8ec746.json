{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nvar Ticks = function (_Component) {\n  _inherits(Ticks, _Component);\n\n  function Ticks() {\n    _classCallCheck(this, Ticks);\n\n    return _possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  Ticks.prototype.render = function render() {\n    var _props = this.props,\n        children = _props.children,\n        values = _props.values,\n        scale = _props.scale,\n        count = _props.count,\n        emitMouse = _props.emitMouse,\n        emitTouch = _props.emitTouch;\n    var ticks = (values ? values : scale.getTicks(count)).map(function (value) {\n      return {\n        id: '$$-' + value,\n        value: value,\n        percent: scale.getValue(value)\n      };\n    });\n    var renderedChildren = children({\n      ticks: ticks,\n      emitMouse: emitMouse,\n      emitTouch: emitTouch\n    });\n    return renderedChildren && React.Children.only(renderedChildren);\n  };\n\n  return Ticks;\n}(Component);\n\nTicks.propTypes = {\n  /** @ignore */\n  scale: PropTypes.object,\n\n  /**\n   * Approximate number of ticks you want to render.\n   * If you supply your own ticks using the values prop this prop has no effect.\n   */\n  count: PropTypes.number,\n\n  /**\n   * The values prop should be an array of unique numbers.\n   * Use this prop if you want to specify your own tick values instead of ticks generated by the slider.\n   * The numbers should be valid numbers in the domain and correspond to the step value.\n   * Invalid values will be coerced to the closet matching value in the domain.\n   */\n  values: PropTypes.array,\n\n  /** @ignore */\n  emitMouse: PropTypes.func,\n\n  /** @ignore */\n  emitTouch: PropTypes.func,\n\n  /**\n   * A function to render the ticks.\n   * The function receives an object with an array of ticks.\n   * `({ ticks  }): element`\n   */\n  children: PropTypes.func.isRequired\n};\nTicks.defaultProps = {\n  count: 10\n};\nexport default Ticks;","map":null,"metadata":{},"sourceType":"module"}